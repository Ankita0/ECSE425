 1. Instruction fetch cycle (IF):
  Send the program counter (PC) to memory and fetch the current instruction
  from memory. Update the PC to the next sequential PC by adding 4 (since
  each instruction is 4 bytes) to the PC.
  
2. Instruction decode/register fetch cycle (ID):
  Decode the instruction and read the registers corresponding to register
  source specifiers from the register file. Do the equality test on the registers
  as they are read, for a possible branch. Sign-extend the offset field of the
  instruction in case it is needed. Compute the possible branch target address
  by adding the sign-extended offset to the incremented PC. In an aggressive
  implementation, which we explore later, the branch can be completed at the
  end of this stage by storing the branch-target address into the PC, if the condition
  test yielded true.
  
  Decoding is done in parallel with reading registers, which is possible
  because the register specifiers are at a fixed location in a RISC architecture.
  This technique is known as fixed-field decoding. Note that we may read a
  register we don’t use, which doesn’t help but also doesn’t hurt performance.
  (It does waste energy to read an unneeded register, and power-sensitive
  designs might avoid this.) Because the immediate portion of an instruction
  is also located in an identical place, the sign-extended immediate is also calculated
  during this cycle in case it is needed.

3. Execution/effective address cycle (EX):
  The ALU operates on the operands prepared in the prior cycle, performing
  one of three functions depending on the instruction type.
     ■   Memory reference—The ALU adds the base register and the offset to form
          the effective address.
     ■ Register-Register ALU instruction—The ALU performs the operation
          specified by the ALU opcode on the values read from the register file.
     ■ Register-Immediate ALU instruction—The ALU performs the operation
          specified by the ALU opcode on the first value read from the register file
          and the sign-extended immediate.
  In a load-store architecture the effective address and execution cycles
  can be combined into a single clock cycle, since no instruction needs to
  simultaneously calculate a data address and perform an operation on the
  data.

4. Memory access (MEM):
  If the instruction is a load, the memory does a read using the effective
  address computed in the previous cycle. If it is a store, then the memory
  writes the data from the second register read from the register file using the
  effective address.

5. Write-back cycle (WB):
  ■ Register-Register ALU instruction or load instruction:
  Write the result into the register file, whether it comes from the memory
  system (for a load) or from the ALU (for an ALU instruction).
